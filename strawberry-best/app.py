import os
import sqlite3
from flask import Flask, request, redirect, render_template, render_template_string, g
from markupsafe import escape


app = Flask(__name__)
DATABASE = os.path.join(os.path.dirname(__file__), 'shared', 'database.db')


def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()


@app.route('/')
def index():
    return render_template("index.html")


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = escape(request.form['username'])
        tg_username = escape(request.form['tg_username'])

        db = get_db()
        db.execute(
            "INSERT INTO users (username, tg_username, manifest) VALUES (?, ?, '')",
            (username, tg_username)
        )
        db.commit()

        return redirect('/login')

    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        tg_username = request.form.get('tg_username')
        db = get_db()
        user = db.execute("SELECT id FROM users WHERE tg_username = ?", (tg_username,)).fetchone()
        if user:
            user_id = user[0]
            return f'''
                <script>
                    localStorage.setItem("authorized", "{user_id}");
                    window.location.href = "/profile/{user_id}";
                </script>
            '''
        else:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢", 404

    return render_template('login.html')


@app.route('/profile/<int:user_id>', methods=['GET', 'POST'])
def profile(user_id):
    db = get_db()

    if user_id == 1135:
        username = "mirror_berry"
        manifest = "–æ–Ω –ø—ã—Ç–∞–ª—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –¥—Ä—É–≥–∏—Ö..."
        rendered = "<p>–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ mirror_berry. –Ø –±—Ä–æ—Å–∏–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º StrawberryBest –∏ —É—à—ë–ª –∏–∑ –∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.</p>" \
        "<p>–í—Å—ë, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç - —á–∞—Å–∞–º–∏ —Å–º–æ—Ç—Ä—è—Ç –µ–≤—Ä–æ–≤–∏–¥–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≥–æ–¥–æ–≤ –∏ –≤—ã—Ä–∞—â–∏–≤–∞—é—Ç –∫–ª—É–±–Ω–∏–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∂–µ—Ä—Ç–≤—É –±—ã–ª–∏ –ø—Ä–∏–Ω–µ—Å–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—Å–æ–≥–ª–∞—Å–Ω—ã—Ö. –ö —Å—á–∞—Å—Ç—å—é, –∫–æ–≥–¥–∞ –º–æ—ë –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ —Ä–∞—Å–∫—Ä–æ—é—Ç, —è –±—É–¥—É —É–∂–µ –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ.</p>" \
        "<p>–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —è –±—ã –Ω–µ —Å—Ç–∞–ª –¥–æ–≤–µ—Ä—è—Ç—å –ª—é–¥—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–∫—Ç–æ –ê.–ú.–ë–∞–±–∞–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ '—Å–ê–º–´—Ö —è—Ä–ö–∏–• –∫–õ—É–±–ù–∏–ß–µ–ö', —á—Ç–æ –∑–∞ —Ç—Ä–µ—à, —è —Ç–∞–∫ –∏ –∑–Ω–∞–ª, —á—Ç–æ –æ–Ω –∫–∞–∫–æ–π-—Ç–æ —Å–µ–∫—Ç–∞–Ω—Ç.</p>"\
        "<p>–ï—Å–ª–∏ —Ç—ã –º–æ–∂–µ—à—å, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–∞–≤–¥—É. –ù–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫–æ–º—É –º–æ–∂–µ—à—å –¥–æ–≤–µ—Ä—è—Ç—å.</p>"\
        "<p>–î–µ—Ä–∂–∏ - AB3QAYQAGMAHEADSAB4QAXYAMMAHKABRAB2AA7I=. –≠—Ç–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è. –ò —É–¥–∞—á–∏.</p>"

        return render_template(
            'profile.html',
            username=username,
            user_id=user_id,
            original_manifest=manifest,
            rendered_manifest=rendered
        )

    if request.method == 'POST':
        new_manifest = request.form.get("manifest", "")
        db.execute("UPDATE users SET manifest = ? WHERE id = ?", (new_manifest, user_id))
        db.commit()

    user = db.execute("SELECT username, manifest FROM users WHERE id = ?", (user_id,)).fetchone()

    if user:
        username, manifest = user
        rendered = escape(manifest)

        return render_template(
            'profile.html',
            username=username,
            user_id=user_id,
            original_manifest=manifest,
            rendered_manifest=rendered
        )
    else:
        return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404


@app.route('/hall_of_fame')
def hall_of_fame():
    db = get_db()
    users = db.execute("SELECT username, manifest FROM users").fetchall()
    return render_template('hall_of_fame.html', users=users)


@app.route('/diary')
def diary():
    return "<p>–ò–Ω–æ–≥–¥–∞ –∑–µ—Ä–∫–∞–ª–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º –Ω—É–∂–Ω–æ... üçì</p>"


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
